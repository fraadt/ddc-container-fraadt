<!doctype html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>My MAS Application</title>
    <meta name="description" content="A simple HTML file which interacts with MAS">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0-beta1/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-0evHe/X+R7YkIZDRvuzKMRqM+OrBnVFBL6DOitfPri4tjfHxaWutUpFmBp4vmVor" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0-beta1/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-pprn3073KE6tl6bjs2QrFaJGz5/SUsLqktiwsUTF55Jfv3qYSDhgCecCxMW52nD2" crossorigin="anonymous"></script>
    <script src="https://cdn.developer.sas.com/packages/sas-auth-browser/latest/dist/index.js"></script>
</head>

<body onload="authenticate()">
    <div id="App"></div>
    <script>
        // Define the application layout
        const App = () => {
            const html = `
                <nav class="navbar bg-primary">
                    <span class="navbar-brand m-2 h1 text-light" href="#">My MAS Application</span>
                    <span class="navbar-text m-2 text-light" id="userId"></span>
                </nav>
                <div id="authentication"></div>
                <div class="row p-2">
                <form class="col-6" id="scoringForm"></form>
                <div id="spinner" class="d-flex justify-content-center d-none">
                    <div class="spinner-border text-primary" role="status"></div>
                </div>
                <div class="col-6" id="scoringOutput">
                </div>
            `
            return html
        }
        // Write the App content to App div
        document.getElementById("App").innerHTML = App()
        // Define the state of the application
        App.state = {
            "baseUrl": "https://viya4.frasep.sas.com",
            "isAuthenticated": false,
        }
        // Function to authenticate user
        const authenticate = async () => {
            const instance = sasAuthBrowser.createCookieAuthenticationCredential({ url: App.state.baseUrl })
            instance.checkAuthenticated()
                .then(
                    () => {
                        console.log("User already authenticated")
                        // Store authentication status
                        App.state = { ...App.state, isAuthenticated: true }
                        return
                    },
                    () => instance.loginPopup().then(
                        () => {
                            console.log("User is authenticated")
                            // Store authentication status
                            App.state = { ...App.state, isAuthenticated: true }
                            return
                        },
                        () => {
                            console.log(("Authentication failed"))
                            // Store authentication status
                            App.state = { ...App.state, isAuthenticated: false }
                            return
                        }
                    )
                )
                .then(() => {
                    // Define an event to trigger other actions when the user is authenticated
                    const event = new Event("authentication")
                    document.getElementById("App").dispatchEvent(event)
                })
        }
        // Function to display a spinner while loading
        const loading = (status, target) => {
            if (status) {
                // Show spinner
                document.getElementById(target).classList.remove("d-none")
            } else {
                // Hide spinner
                document.getElementById(target).classList.add("d-none")
            }
        }
        // Function to collect user information
        const getUserInfo = async () => {
            const endpoint = "/identities/users/@currentUser"
            const url = App.state.baseUrl + endpoint
            const response = await fetch(url, { credentials: "include" })
                .then(response => response.json())
            return response
        }
        // Function to collect module signature
        const getSignature = async () => {
            const masModuleName = "sbxxab_heart_mas"
            const endpoint = `/microanalyticScore/modules/${masModuleName}/steps/score`
            const url = App.state.baseUrl + endpoint
            const headers = {
                "Accept": "application/vnd.sas.microanalytic.module.step+json"
            }
            const response = await fetch(url, { headers: headers, credentials: "include" }).then(response => {
                // Retrieve the CSRF Token which will be required to score the data
                App.state = { ...App.state, csrfToken: response.headers.get("X-Csrf-Token") }
                return response.json()
            })
            return response
        }
        // Generate form based on input signature
        const generateForm = (target) => {
            // Define the labels which will be displayed for the form elements
            const labels = [
                { "name": "sex", "description": "Sex" },
                { "name": "ageatstart", "description": "Age when diagnosed" },
                { "name": "cholesterol", "description": "Cholesterol Level" },
                { "name": "diastolic", "description": "Diastolic Level" },
                { "name": "mrw", "description": "Metropolitan Relative Weight" },
                { "name": "systolic", "description": "Systolic level" },
                { "name": "smoking", "description": "Number of Cigarets/Day" }
            ]
            // Generate the input elements
            const inputs = App.state.inputs.map(input => {
                // Retrieve element specific label
                const [label] = labels.filter(label => label.name === input.name)
                // Generate element specific label
                const inputLabel = `<label for=${input.name} class="col-4 col-form-label" >${label.description}</label>`
                // Generate HTML for the input element
                switch (input.type) {
                    case "string":
                        return `
                    <div class="row m-2">
                        ${inputLabel}
                        <div class="col-2">
                            <input class="form-control" id=${input.name} type="string" size="${input.size}">
                        </div>
                    </div>
                `
                        break;
                    case "decimal":
                        return `
                    <div class="row m-2">
                        ${inputLabel}
                        <div class="col-2">
                            <input class="form-control" id=${input.name} type="numeric">
                        </div>
                    </div>
                `
                        break;
                    default:
                        console.log(`Type ${input.type} for input ${input.name} is not handled!`)
                        break;
                }
            })
            // Create a button to submit the form
            const button = `<div class="row"><button type="submit" id="evaluateButton" class="btn btn-primary col-6 m-2">Evaluate!</button></div>`
            // Write the generated form elements to the target div
            document.getElementById(target).innerHTML = `${inputs.join("")} ${button}`
        }
        // Function to score the data
        const scoreData = async (data) => {
            const masModuleName = "sbxxab_heart_mas"
            const endpoint = `/microanalyticScore/modules/${masModuleName}/steps/score`
            const url = App.state.baseUrl + endpoint
            const formData = { "inputs": data }
            const headers = {
                "Content-Type": "application/vnd.sas.microanalytic.module.step.input+json",
                "Accept": "application/vnd.sas.microanalytic.module.step.output+json",
                "X-Csrf-Token": App.state.csrfToken
            }
            const response = await fetch(url, {
                method: "POST",
                body: JSON.stringify(formData),
                headers: headers,
                credentials: "include"
            }).then(response => response.json())
            return response
        }
        // Generate output based on score data and output signature
        const generateOutput = (data, target) => {
            // Create a formatter function to display the probability in percent
            const formatter = Intl.NumberFormat('en-US', { style: 'percent' })
            // Define the labels which will be displayed for the output elements
            const labels = [
                { "name": "I_Status", "description": "The highest probable status in 6 months is", "type": "string" },
                { "name": "P_StatusAlive", "description": "Probability of being 'Alive' in 6 months", "type": "numeric", "format": "percent" },
                { "name": "P_StatusDead", "description": "Probability of being 'Dead' in 6 months", "type": "numeric", "format": "percent" },
                { "name": "_WARN_", "description": "Warning", "type": "string" },
                { "name": "_P_", "description": "Highest Probable Status", "type": "numeric" },
            ]
            // Generate the main information about the status
            const [observation] = data.filter(obs => obs.name === "I_Status")
            const [label] = labels.filter(label => observation.name === label.name)
            let html = `<p>${label.description} <b>${observation.value.trim()}</b></p>`
            // Generate more information section
            const outputs = App.state.outputs.slice(1).map(output => {
                const [observation] = data.filter(obs => obs.name.toUpperCase() === output.name.toUpperCase())
                const [label] = labels.filter(label => observation.name === label.name)
                // Define how to display the data based on their type and format
                let displayValue
                if (label.type === "numeric" && label.format === "percent") {
                    displayValue = formatter.format(observation.value)
                } else {
                    displayValue = observation.value
                }
                return `<p>${label.description}: <b>${displayValue}</b></p>`
            })
            // Create a more information section
            html += `<details>
                        <summary><b>More information</b></summary>
                        ${outputs.join("")}
                    </details>
                    `
            // Insert the HTML elements in the target div
            document.getElementById(target).innerHTML = html
        }
        // Define an event listener for authentication event
        document.getElementById("App").addEventListener("authentication", async () => {
            if (App.state.isAuthenticated) {
                // Retrieve user information
                // Display the user name in the application bar
                getUserInfo().then(response => {
                    App.state = { ...App.state, userInfo: response }
                    document.getElementById("userId").innerHTML = response.name
                })
                // Retrieve the module signature
                const signature = await getSignature()
                App.state = {...App.state, inputs: signature.inputs}
                generateForm("scoringForm")
                // Store the inputs and outputs in the state
                App.state = { ...App.state, inputs: signature.inputs, outputs: signature.outputs }
            } else {
                // Delete user information if user is not authenticated
                App.state = { ...App.state, userInfo: null }
                document.getElementById("userId").innerHTML = null
            }
        })
        // Define an event listener for form submit
        document.getElementById("scoringForm").addEventListener("submit", async (event) => {
            // Prevents the reset of the form value on form submission
            event.preventDefault()
            // Adapt the form data to the format required by the scoring module
            const data = []
            Array.from(event.target.querySelectorAll("input")).map(input => {
                const [varInfo] = App.state.inputs.filter(variable => variable.name === input.id)
                varInfo.type === "string" ? value = input.value : value = parseFloat(input.value)
                data.push({ "name": input.id, "value": value })
            })
            // Score the data
            const score = await scoreData(data)
            // Display the output
            generateOutput(score.outputs, "scoringOutput")
        })
    </script>
</body>